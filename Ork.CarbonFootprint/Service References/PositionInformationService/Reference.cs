//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.18052
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ork.CarbonFootprint.PositionInformationService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PositionInformationService.PositionInformationService")]
    public interface PositionInformationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PositionInformationService/Calculate", ReplyAction="http://tempuri.org/PositionInformationService/CalculateResponse")]
        void Calculate(int carbonFootprintId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PositionInformationService/Calculate", ReplyAction="http://tempuri.org/PositionInformationService/CalculateResponse")]
        System.IAsyncResult BeginCalculate(int carbonFootprintId, System.AsyncCallback callback, object asyncState);
        
        void EndCalculate(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface PositionInformationServiceChannel : Ork.CarbonFootprint.PositionInformationService.PositionInformationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PositionInformationServiceClient : System.ServiceModel.ClientBase<Ork.CarbonFootprint.PositionInformationService.PositionInformationService>, Ork.CarbonFootprint.PositionInformationService.PositionInformationService {
        
        private BeginOperationDelegate onBeginCalculateDelegate;
        
        private EndOperationDelegate onEndCalculateDelegate;
        
        private System.Threading.SendOrPostCallback onCalculateCompletedDelegate;
        
        public PositionInformationServiceClient() {
        }
        
        public PositionInformationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PositionInformationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PositionInformationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PositionInformationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CalculateCompleted;
        
        public void Calculate(int carbonFootprintId) {
            base.Channel.Calculate(carbonFootprintId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCalculate(int carbonFootprintId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCalculate(carbonFootprintId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndCalculate(System.IAsyncResult result) {
            base.Channel.EndCalculate(result);
        }
        
        private System.IAsyncResult OnBeginCalculate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int carbonFootprintId = ((int)(inValues[0]));
            return this.BeginCalculate(carbonFootprintId, callback, asyncState);
        }
        
        private object[] OnEndCalculate(System.IAsyncResult result) {
            this.EndCalculate(result);
            return null;
        }
        
        private void OnCalculateCompleted(object state) {
            if ((this.CalculateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CalculateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CalculateAsync(int carbonFootprintId) {
            this.CalculateAsync(carbonFootprintId, null);
        }
        
        public void CalculateAsync(int carbonFootprintId, object userState) {
            if ((this.onBeginCalculateDelegate == null)) {
                this.onBeginCalculateDelegate = new BeginOperationDelegate(this.OnBeginCalculate);
            }
            if ((this.onEndCalculateDelegate == null)) {
                this.onEndCalculateDelegate = new EndOperationDelegate(this.OnEndCalculate);
            }
            if ((this.onCalculateCompletedDelegate == null)) {
                this.onCalculateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCalculateCompleted);
            }
            base.InvokeAsync(this.onBeginCalculateDelegate, new object[] {
                        carbonFootprintId}, this.onEndCalculateDelegate, this.onCalculateCompletedDelegate, userState);
        }
    }
}
